(function(m,g){typeof exports=="object"&&typeof module<"u"?module.exports=g():typeof define=="function"&&define.amd?define(g):(m=typeof globalThis<"u"?globalThis:m||self,m.SnapLine=g())})(this,function(){"use strict";var N=Object.defineProperty;var Y=(m,g,h)=>g in m?N(m,g,{enumerable:!0,configurable:!0,writable:!0,value:h}):m[g]=h;var r=(m,g,h)=>Y(m,typeof g!="symbol"?g+"":g,h);function m(i,n,t){return i>=n&&i<=t||i>=t&&i<=n}function g(i,n,t){const o=t.zoom,e=t.zoom,s=-i*t.zoom+t.cameraWidth/2,c=-n*t.zoom+t.cameraHeight/2;return`${o},0,0,0,0,${e},0,0,0,0,1,0,${s},${c},0,1`}var h=(i=>(i.none="none",i.left="left",i.middle="middle",i.right="right",i.invalid="invalid",i))(h||{}),p=(i=>(i[i.node=0]="node",i[i.connector=1]="connector",i[i.line=2]="line",i[i.unspecified=3]="unspecified",i[i.inputConnector=4]="inputConnector",i[i.outputConnector=5]="outputConnector",i[i.invalid=6]="invalid",i))(p||{}),a=(i=>(i[i.container=0]="container",i[i.canvas=1]="canvas",i[i.background=2]="background",i[i.selectionBox=3]="selectionBox",i[i.invalid=4]="invalid",i))(a||{});class x{constructor(n){r(this,"g");r(this,"gid");r(this,"positionX");r(this,"positionY");r(this,"type");this.g=n,this.gid=(++n.gid).toString(),this.positionX=0,this.positionY=0,this.type=p.unspecified}bindFunction(n){n.onmousedown=this.domMouseDown.bind(this),n.ontouchstart=this.domTouchStart.bind(this)}domMouseDown(n){this.domCursorDown({button:n.button,clientX:n.clientX,clientY:n.clientY}),n.stopPropagation()}domTouchStart(n){this.domCursorDown({button:0,clientX:n.touches[0].clientX,clientY:n.touches[0].clientY}),n.stopPropagation()}domCursorDown(n){let t=n.button,o=n.clientX,e=n.clientY;console.debug(`Base class mousedown event triggered on ${this.gid}!`),t==0?this.g.currentMouseDown=h.left:t==1?this.g.currentMouseDown=h.middle:t==2&&(this.g.currentMouseDown=h.right),this.g.targetObject=this,this.g.mousedown_x=o,this.g.mousedown_y=e,this.g.dx=0,this.g.dy=0,this.g.dx_offset=0,this.g.dy_offset=0,this.componentCursorDown(n)}componentCursorDown(n){}domCursorUp(){console.debug(`Base class mouseup event triggered on ${this.gid}!`),this.componentCursorUp()}componentCursorUp(){}onFocus(){}offFocus(){}onDrag(){}onPan(){}destroy(){}}class y extends x{constructor(t,o,e){super(e);r(this,"parent");r(this,"config");r(this,"dom");this.config=t,this.parent=o,this.dom=null}}class O extends y{constructor(t,o,e,s){super(o,e,s);r(this,"name");r(this,"dom");r(this,"prop");this.name=o.name,this.prop=e.prop,this.dom=t}bindFunction(t){}addInputUpdateListener(t,o){this.dom.addEventListener(t,o.bind(this))}}class w extends y{constructor(t,o,e,s){super(o,e,s);r(this,"name");r(this,"connectorX");r(this,"connectorY");r(this,"connectorTotalOffsetX");r(this,"connectorTotalOffsetY");r(this,"prop");r(this,"svgLines");r(this,"type",p.connector);r(this,"dom");r(this,"parent");this.connectorX=0,this.connectorY=0,this.connectorTotalOffsetX=0,this.connectorTotalOffsetY=0,this.dom=t,this.parent=e,this.prop=e.prop,o.name?this.name=o.name:(s.gid++,this.name=s.gid.toString()),this.g.globalNodeTable[this.gid]=this,this.dom.setAttribute("sl-gid",this.gid.toString()),this.svgLines=[],this.bindFunction(this.dom)}pxToInt(t){return parseInt(t.substring(0,t.length-2))}getComputed(t,o){const e=window.getComputedStyle(t,null).getPropertyValue(o);return e.endsWith("px")?this.pxToInt(e):parseInt(e)}updateDOMproperties(){let o=this.dom.getBoundingClientRect(),e=this.parent.dom.getBoundingClientRect();this.connectorTotalOffsetX=(o.left-e.left)/this.g.zoom+o.width/2/this.g.zoom,this.connectorTotalOffsetY=(o.top-e.top)/this.g.zoom+o.height/2/this.g.zoom}createLineDOM(){const t=document.createElementNS("http://www.w3.org/2000/svg","svg"),o=document.createElementNS("http://www.w3.org/2000/svg","line");return t.appendChild(o),t.classList.add("sl-connector-svg"),o.classList.add("sl-connector-line"),o.setAttribute("stroke-width","4"),this.g.canvas.appendChild(t),t}setStyle(t,o){if(t)for(const e in o)t.style[e]=o[e]}renderLinePosition(t){let o=t.svg;if(!o)return;this.setStyle(o,{position:"absolute",overflow:"visible",pointerEvents:"none",willChange:"transform",transform:`translate3d(${t.connector_x}px, ${t.connector_y}px, 0)`});let e=o.children[0];e.setAttribute("x1","0"),e.setAttribute("y1","0"),e.setAttribute("x2",""+t.x2),e.setAttribute("y2",""+t.y2)}deleteLine(t){if(this.svgLines.length>0){const o=this.svgLines[t];o.requestDelete=!0}}deleteAllLines(){for(const t of this.svgLines)t.requestDelete=!0}}class L extends w{constructor(t,o,e,s){super(t,o,e,s);r(this,"type",p.inputConnector);r(this,"peerOutput");r(this,"updateFunction",()=>{console.debug("Update function not set for input connector")});this.peerOutput=null}renderAllLines(t){var o;(o=this.peerOutput)==null||o.renderAllLines(t)}domCursorDown(t){console.debug(`ConnectorComponent mousedown event triggered on ${this.gid}!`);let o=t.button,e=t.clientX,s=t.clientY;this.peerOutput&&(super.domCursorDown({button:o,clientX:e,clientY:s}),this.g.targetObject=this.peerOutput,this.g.dx_offset=(this.connectorX-this.peerOutput.connectorX)*this.g.zoom,this.g.dy_offset=(this.connectorY-this.peerOutput.connectorY)*this.g.zoom,this.g.dx=this.g.dx_offset,this.g.dy=this.g.dy_offset,this.peerOutput.componentCursorDown({button:o,clientX:e,clientY:s}),this.peerOutput.disconnectFromInput(this))}updateConnectorPosition(){this.connectorX=this.parent.positionX+this.connectorTotalOffsetX,this.connectorY=this.parent.positionY+this.connectorTotalOffsetY}disconnectFromOutput(){this.peerOutput=null}connectToOutput(t){this.peerOutput=t}nodeDrag(){this.updateConnectorPosition(),this.peerOutput&&this.peerOutput.nodeDrag()}destroy(){this.peerOutput&&this.peerOutput.disconnectFromInput(this)}}class M extends w{constructor(t,o,e,s){super(t,o,e,s);r(this,"val");r(this,"peerInputs",[]);r(this,"type",p.outputConnector);this.val=null,this.svgLines=[],this.dom=t,this.renderAllLines=this.renderAllLines.bind(this)}connectToInput(t){if(console.debug("Connecting to input: ",t),this===t.peerOutput){console.debug("Already connected");return}t.peerOutput&&(console.debug("Disconnecting from: ",t.peerOutput),t.peerOutput.disconnectFromInput(t),t.disconnectFromOutput()),console.debug("Now connecting to: ",t),t.connectToOutput(this),this.peerInputs.push(t),this.updateConnectorPosition(),this.svgLines[0].to=t,this.g.globalLines.push(this.svgLines[0])}disconnectFromInput(t){console.debug("Disconnecting from input: ",t);for(const o of this.svgLines)if(o.to==t){o.requestDelete=!0;break}t.disconnectFromOutput(),this.peerInputs=this.peerInputs.filter(o=>o.gid!=t.gid)}updateConnectorPosition(){this.connectorX=this.parent.positionX+this.connectorTotalOffsetX,this.connectorY=this.parent.positionY+this.connectorTotalOffsetY}setLineXYPosition(t,o,e){t.x2=o,t.y2=e}refreshLinePosition(t){t.connector_x=this.connectorX,t.connector_y=this.connectorY,t.to?this.setLineXYPosition(t,t.to.connectorX-this.connectorX,t.to.connectorY-this.connectorY):this.setLineXYPosition(t,this.g.dx/this.g.zoom,this.g.dy/this.g.zoom)}refreshAllLinePositions(){this.updateConnectorPosition();for(const t of this.svgLines)this.refreshLinePosition(t)}renderAllLines(t){for(const o of t){if(o.svg){if(o.requestDelete){this.g.canvas.removeChild(o.svg);continue}}else{let e=this.createLineDOM();o.svg=e}o.connector_x=this.connectorX,o.connector_y=this.connectorY,o.to&&(o.x2=o.to.connectorX-this.connectorX,o.y2=o.to.connectorY-this.connectorY),o.svg.style.transform=`translate3d(${this.connectorX}px, ${this.connectorY}px, 0)`,this.renderLinePosition(o)}}componentCursorDown(t){console.debug(`ConnectorComponent mousedown event triggered on ${this.gid}!`),this.svgLines.unshift({svg:null,to:null,from:this,connector_x:this.connectorX,connector_y:this.connectorY,x2:0,y2:0,connector:this,requestDelete:!1}),this.refreshAllLinePositions()}onDrag(){let t=9999,o=0,e=0;const s=this.g.hoverDOM;if(this.svgLines.length==0){console.error("Error: svgLines is empty");return}if(s&&s.classList.contains("sl-input-connector")){const c=s.getAttribute("sl-gid");if(!c)return;console.debug("Hovering over input connector: ",c);const u=this.g.globalNodeTable[c];u.updateConnectorPosition(),o=u.connectorX,e=u.connectorY,t=Math.sqrt(Math.pow(this.connectorX+this.g.dx/this.g.zoom-o,2)+Math.pow(this.connectorY+this.g.dy/this.g.zoom-e,2)),t<40?this.setLineXYPosition(this.svgLines[0],o-this.connectorX,e-this.connectorY):this.setLineXYPosition(this.svgLines[0],this.g.dx/this.g.zoom,this.g.dy/this.g.zoom)}else this.setLineXYPosition(this.svgLines[0],this.g.dx/this.g.zoom,this.g.dy/this.g.zoom)}nodeDrag(){this.refreshAllLinePositions()}componentCursorUp(){console.debug("connector domMouseUp");const t=this.g.hoverDOM;if(t&&t.classList.contains("sl-input-connector")){const o=t.getAttribute("sl-gid");if(console.debug("Connected to input connector: ",o),!o){console.error("Error: gid is null");return}const e=this.g.globalNodeTable[o];this.connectToInput(e),e.prop[e.name]=this.prop[this.name],e.updateFunction(),this.setLineXYPosition(this.svgLines[0],e.connectorX-this.connectorX,e.connectorY-this.connectorY),this.g.snapline.requestLineRender=this}else{let o=this.deleteLine(0);o&&(o.requestDelete=!0)}}getValue(){return this.parent.exec(),this.val}destroy(){for(const t of this.peerInputs)this.disconnectFromInput(t)}}class C extends x{constructor(t,o){super(o);r(this,"type",p.node);r(this,"nodeType");r(this,"dom");r(this,"inputConnectors");r(this,"outputConnectors");r(this,"components");r(this,"nodeWidth",0);r(this,"nodeHeight",0);r(this,"dragStartX",0);r(this,"dragStartY",0);r(this,"overlapping");r(this,"freeze");r(this,"prop");r(this,"propFunc");r(this,"nodeStyle");this.nodeType="",this.dom=t,this.inputConnectors={},this.outputConnectors={},this.components={},this.dragStartX=this.positionX,this.dragStartY=this.positionY,this.overlapping=null,this.freeze=!1,this.prop={},this.prop=new Proxy(this.prop,{set:(e,s,c)=>{if(s=s.toString(),e[s]=c,s in this.outputConnectors){console.debug(`Update all nodes connected to ${s}`);const u=this.outputConnectors[s].peerInputs;if(u)for(const d of u)d.parent.prop[d.name]=c}else s in this.inputConnectors&&(console.debug(`Call all functions connected to ${s}`),s in this.propFunc&&this.propFunc[s]());return!0}}),this.propFunc={},this.setNodeStyle({willChange:"transform",position:"absolute",transformOrigin:"top left"}),this.g.globalNodeList.push(this),this.initNode=this.initNode.bind(this),this.addInputConnector=this.addInputConnector.bind(this),this.addOutputConnector=this.addOutputConnector.bind(this),this.addInputForm=this.addInputForm.bind(this)}initNode(t){this.dom=t,this.dom.id=this.gid,this.renderNode(this.nodeStyle),this.bindFunction(this.dom),new ResizeObserver(()=>{this.updateDOMproperties()}).observe(this.dom)}updateDOMproperties(){this.nodeHeight=this.dom.offsetHeight,this.nodeWidth=this.dom.offsetWidth;for(const t of Object.values(this.inputConnectors))t.updateDOMproperties();for(const t of Object.values(this.outputConnectors))t.updateDOMproperties()}setNodeStyle(t){this.nodeStyle=Object.assign({},this.nodeStyle,t)}renderNode(t){for(const o in t)o[0]!="_"&&(this.dom.style[o]=t[o]);t._focus?this.dom.classList.add("focus"):this.dom.classList.remove("focus");for(const o of Object.values(this.outputConnectors))o.renderAllLines(o.svgLines),o.svgLines=o.svgLines.filter(e=>!e.requestDelete);for(const o of Object.values(this.inputConnectors)){let e=o.peerOutput;if(!e)continue;let s=e.parent.outputConnectors;for(const c of Object.values(s))c.renderAllLines(c.svgLines)}}addNodeToCanvas(t,o){this.positionX=t,this.positionY=o,this.nodeWidth=this.dom.offsetWidth,this.nodeHeight=this.dom.offsetHeight,this.setNodeStyle({transform:`translate3d(${this.positionX}px, ${this.positionY}px, 0)`}),this.renderNode(this.nodeStyle),this.updateDOMproperties(),this.g.canvas.appendChild(this.dom)}addOutputConnector(t,o){const e=new M(t,{name:o},this,this.g);return this.outputConnectors[o]=e,this.prop[o]=null,e}addInputConnector(t,o){const e=new L(t,{name:o},this,this.g);return this.inputConnectors[o]=e,this.prop[o]=null,e}addInputForm(t,o){const e=new O(t,{name:o},this,this.g);return this.prop[o]=null,e}addPropSetFunction(t,o){this.propFunc[o]=t}findInput(t){for(const o of Object.values(this.inputConnectors))if(o.name==t)return o;return null}findOutput(t){for(const o of Object.values(this.outputConnectors))if(o.name==t)return o;return null}setStartPositions(){this.dragStartX=this.positionX,this.dragStartY=this.positionY}componentCursorDown(t){console.debug(`Node class mousedown event triggered on ${this.gid}!`);let o=!1;for(let e=0;e<this.g.focusNodes.length;e++)if(this.g.focusNodes[e].gid==this.gid){o=!0;break}if(o)for(let e=0;e<this.g.focusNodes.length;e++)this.g.focusNodes[e].setStartPositions();else{for(let e=0;e<this.g.focusNodes.length;e++)this.g.focusNodes[e].offFocus();this.g.focusNodes=[this],this.onFocus()}this.setStartPositions()}componentCursorUp(){if(this.freeze)return;if(this.positionX=this.dragStartX+this.g.dx/this.g.zoom,this.positionY=this.dragStartY+this.g.dy/this.g.zoom,console.debug("Mouse has moved: "+this.g.mouseHasMoved),!this.g.mouseHasMoved&&this.g.targetObject&&this.g.targetObject.gid==this.gid){console.debug("Mouse has not moved");for(let c=0;c<this.g.focusNodes.length;c++)this.g.focusNodes[c].offFocus();this.g.focusNodes=[this],this.onFocus();return}if(this.overlapping==null)return;const t=this.overlapping.from,o=this.overlapping.to,e=Object.values(this.inputConnectors)[0],s=Object.values(this.outputConnectors)[0];o&&(t.disconnectFromInput(o),t.connectToInput(e),s.connectToInput(o))}onDrag(){if(this.freeze)return;this.positionX=this.dragStartX+this.g.dx/this.g.zoom,this.positionY=this.dragStartY+this.g.dy/this.g.zoom,this.setNodeStyle({transform:`translate3d(${this.positionX}px, ${this.positionY}px, 0)`});for(const o of Object.values(this.inputConnectors))o.nodeDrag();for(const o of Object.values(this.outputConnectors))o.nodeDrag();if(this.overlapping=null,Object.keys(this.inputConnectors).length==0&&Object.keys(this.outputConnectors).length==0)return;let t=9999;for(const o of this.g.globalLines)m(this.positionX+this.nodeWidth/2,o.connector_x,o.connector_x+o.x2)&&m(this.positionY+this.nodeHeight/2,o.connector_y,o.connector_y+o.y2)&&(o.y2+o.connector_x)/2<t&&(this.overlapping=o,t=(o.y2+this.positionY)/2);this.overlapping}onFocus(){this.setNodeStyle({_focus:!0}),this.renderNode(this.nodeStyle)}offFocus(){this.setNodeStyle({_focus:!1}),this.renderNode(this.nodeStyle)}evaluate(t){console.debug("Update all nodes connected to "+t);const o=this.outputConnectors[t];if(o)for(const e of o.peerInputs)console.debug(`Update input ${e.name} connected to ${t} with value ${this.prop[t]}`),e.prop[e.name]=this.prop[t],e.updateFunction()}exec(){}destroy(){var t;(t=this.g.canvas)==null||t.removeChild(this.dom);for(const o of Object.values(this.inputConnectors))o.destroy();for(const o of Object.values(this.outputConnectors))o.destroy()}}class S{constructor(){r(this,"g");r(this,"containerStyle",{});r(this,"canvasStyle",{});r(this,"selectionBoxStyle",{});r(this,"backgroundStyle",{});r(this,"requestLineRender",null);this.g=null,this.containerStyle={position:"relative",overflow:"hidden"},this.selectionBoxStyle={position:"absolute",pointerEvents:"none"},this.initSnapLine=this.initSnapLine.bind(this)}initSnapLine(n,t,o,e){this.g={canvas:t,canvasContainer:n,canvasBackground:o,selectionBox:e,currentMouseDown:h.none,mousedown_x:0,mousedown_y:0,mouse_x:0,mouse_y:0,mouse_x_world:0,mouse_y_world:0,camera_pan_start_x:0,camera_pan_start_y:0,dx:0,dy:0,dx_offset:0,dy_offset:0,overrideDrag:!1,camera_x:0,camera_y:0,zoom:1,cameraWidth:0,cameraHeight:0,targetObject:null,focusNodes:[],hoverDOM:null,gid:0,globalLines:[],globalNodeList:[],globalNodeTable:{},mouseHasMoved:!1,ignoreMouseUp:!1,prevTouches:null,prevSingleTouchTime:0,snapline:this};const s=this.g;s.cameraWidth=s.canvasContainer.clientWidth,s.cameraHeight=s.canvasContainer.clientHeight,console.debug(`Canvas size: ${s.cameraWidth}x${s.cameraHeight}`),this.setCanvasElementStyle(a.canvas,{position:"relative",top:"0px",left:"0px",transform:`translate(${s.cameraWidth/2}px, ${s.cameraHeight/2}px)`,width:"0px",height:"0px"}),this.setCanvasElementStyle(a.background,{width:s.cameraWidth*10+"px",height:s.cameraHeight*10+"px",transform:`translate(${-s.cameraWidth*5}px, ${-s.cameraHeight*5}px)`,transformOrigin:"center",zIndex:"0",position:"absolute"}),this.renderCanvasElement(a.container,this.containerStyle),this.renderCanvasElement(a.canvas,this.canvasStyle),this.renderCanvasElement(a.background,this.backgroundStyle),this.renderCanvasElement(a.selectionBox,this.selectionBoxStyle),s.canvasContainer.addEventListener("mouseup",this.onMouseUp.bind(this)),s.canvasContainer.addEventListener("mousemove",this.onMouseMove.bind(this)),s.canvasContainer.addEventListener("mousedown",this.onMouseDown.bind(this)),s.canvasContainer.addEventListener("wheel",this.onWheel.bind(this)),s.canvasContainer.addEventListener("keydown",this.onKeyDown.bind(this)),document.addEventListener("mousemove",this.onMouseMove.bind(this)),document.addEventListener("mouseup",this.onMouseUp.bind(this)),s.canvasContainer.addEventListener("touchstart",this.onTouchStart.bind(this)),s.canvasContainer.addEventListener("touchmove",this.onTouchMove.bind(this)),s.canvasContainer.addEventListener("touchend",this.onTouchEnd.bind(this)),window.requestAnimationFrame(this.step.bind(this))}setCanvasElementStyle(n,t){switch(n){case a.canvas:this.canvasStyle=Object.assign({},this.canvasStyle,t),this.canvasStyle._requestUpdate="true";break;case a.container:this.containerStyle=Object.assign({},this.containerStyle,t),this.containerStyle._requestUpdate="true";break;case a.background:this.backgroundStyle=Object.assign({},this.backgroundStyle,t),this.backgroundStyle._requestUpdate="true";break;case a.selectionBox:this.selectionBoxStyle=Object.assign({},this.selectionBoxStyle,t),this.selectionBoxStyle._requestUpdate="true";break;default:console.error("Invalid dom type: "+n);return}}renderCanvasElement(n,t){let o=null;if(this.g!=null){switch(n){case a.canvas:o=this.g.canvas;break;case a.container:o=this.g.canvasContainer;break;case a.background:o=this.g.canvasBackground;break;case a.selectionBox:o=this.g.selectionBox;break;default:console.error("Invalid dom type: "+n);return}if(o!=null&&t._requestUpdate=="true"){for(const e in t)o.style[e]=t[e];t._requestUpdate="false"}}}onTouchStart(n){if(n.touches.length>1){this.g.prevTouches.length==1&&this.onCursorUp(),this.g.currentMouseDown=h.middle;let t=(n.touches[0].clientX+n.touches[1].clientX)/2,o=(n.touches[0].clientY+n.touches[1].clientY)/2;this.onCursorDown(h.middle,t,o),this.g.prevTouches=n.touches;return}this.onCursorDown(h.left,n.touches[0].clientX,n.touches[0].clientY)}onMouseDown(n){let t=h.invalid;switch(n.button){case 0:t=h.left;break;case 1:t=h.middle;break;default:return}this.onCursorDown(t,n.clientX,n.clientY)}onCursorDown(n,t,o){this.g.currentMouseDown=n,console.debug("Cursor down: "+n),this.g.targetObject&&this.g.targetObject.type==p.outputConnector&&(console.debug("Cursor down with tmp line"),this.g.targetObject.domCursorUp());const e=this.g;if(!e.overrideDrag){console.debug("Cursor ddown"),e.currentMouseDown!=h.none&&this.setCanvasElementStyle(a.selectionBox,{width:"0px",height:"0px",left:"0px",top:"0px",pointerEvents:"none",opacity:"0"}),e.focusNodes=[];for(const s of e.globalNodeList)s.offFocus();e.mousedown_x=t,e.mousedown_y=o,e.camera_pan_start_x=e.camera_x,e.camera_pan_start_y=e.camera_y}}onTouchMove(n){if(n.touches.length<=0){let b=document.elementFromPoint(n.touches[0].clientX,n.touches[0].clientY);this.onCursorMove(b,n.touches[0].clientX,n.touches[0].clientY),this.g.prevTouches=n.touches;return}if(this.g.prevTouches==null||this.g.prevTouches.length!=2){n.touches.length==2&&(this.g.prevTouches=n.touches);return}let t=n.touches[0],o=n.touches[1],e=null,s=null;for(let b=0;b<n.touches.length;b++)t.identifier==this.g.prevTouches[b].identifier?e=this.g.prevTouches[b]:o.identifier==this.g.prevTouches[b].identifier&&(s=this.g.prevTouches[b]);let c=Math.sqrt(Math.pow(t.clientX-o.clientX,2)+Math.pow(t.clientY-o.clientY,2)),u=Math.sqrt(Math.pow(e.clientX-s.clientX,2)+Math.pow(e.clientY-s.clientY,2)),d=-2*(c-u),_=(t.clientX+o.clientX)/2,f=(t.clientY+o.clientY)/2,v=_-this.g.canvasContainer.offsetLeft,l=f-this.g.canvasContainer.offsetTop;this.onCursorMove(document.elementFromPoint(v,l),v,l),this.g.mouse_x=v,this.g.mouse_y=l,this.onZoom(d),this.g.prevTouches=n.touches}onMouseMove(n){this.onCursorMove(n.target,n.clientX,n.clientY)}onCursorMove(n,t,o){const e=this.g;console.debug("Cursor move"),e.hoverDOM=n,e.mouse_x=t-e.canvasContainer.offsetLeft,e.mouse_y=o-e.canvasContainer.offsetTop;let s=(e.mouse_x-e.cameraWidth/2)/e.zoom+e.camera_x,c=(e.mouse_y-e.cameraHeight/2)/e.zoom+e.camera_y;if(e.mouse_x_world=s,e.mouse_y_world=c,e.dx=t-e.mousedown_x+e.dx_offset,e.dy=o-e.mousedown_y+e.dy_offset,!(e.currentMouseDown==h.none||e.overrideDrag))if((e.dx!==0||e.dy!==0)&&(e.mouseHasMoved=!0),e.targetObject==null){if(e.currentMouseDown==h.middle)e.camera_x=e.camera_pan_start_x-e.dx/e.zoom,e.camera_y=e.camera_pan_start_y-e.dy/e.zoom,this.setCanvasElementStyle(a.canvas,{transform:`matrix3d(${g(e.camera_x,e.camera_y,e)})`,cursor:"grabbing"}),this.setCanvasElementStyle(a.background,{transform:`translate(${e.camera_x+-e.cameraWidth*5}px, ${e.camera_y+-e.cameraHeight*5}px)`,backgroundPosition:`${-e.camera_x}px ${-e.camera_y}px`});else if(e.currentMouseDown==h.left){this.setCanvasElementStyle(a.selectionBox,{width:Math.abs(e.dx)+"px",height:Math.abs(e.dy)+"px",left:Math.min(e.mousedown_x,e.mouse_x)+"px",top:Math.min(e.mousedown_y,e.mouse_y)+"px",opacity:"1"});let u=(Math.min(e.mousedown_x,e.mouse_x)-e.cameraWidth/2)/e.zoom+e.camera_x,d=(Math.min(e.mousedown_y,e.mouse_y)-e.cameraHeight/2)/e.zoom+e.camera_y,_=(Math.max(s,e.mousedown_x,e.mouse_x)-e.cameraWidth/2)/e.zoom+e.camera_x,f=(Math.max(c,e.mousedown_y,e.mouse_y)-e.cameraHeight/2)/e.zoom+e.camera_y,v=[];for(const l of e.globalNodeList)l.positionX+l.nodeWidth>u&&l.positionX<_&&l.positionY+l.nodeHeight>d&&l.positionY<f?(l.onFocus(),v.push(l)):l.offFocus();e.focusNodes=v}}else if(e.targetObject.type==p.node)for(const u of e.focusNodes)u.onDrag();else e.targetObject.onDrag()}onMouseUp(n){this.onCursorUp()}onTouchEnd(n){this.onCursorUp()}onCursorUp(){var t;const n=this.g;if(console.debug("Cursor up"),n.ignoreMouseUp){n.ignoreMouseUp=!1;return}if(n.currentMouseDown==h.left){if(n.targetObject==null)this.setCanvasElementStyle(a.selectionBox,{width:"0px",height:"0px",left:"0px",top:"0px"});else if(n.targetObject.type==p.node)for(const o of n.focusNodes)console.debug("Mouse up with target node: "+o.gid),o.domCursorUp();else n.targetObject.domCursorUp();((t=n.targetObject)==null?void 0:t.type)==p.outputConnector&&(this.requestLineRender=n.targetObject)}n.currentMouseDown=h.none,n.overrideDrag&&this.setCanvasElementStyle(a.canvas,{cursor:"default"}),n.overrideDrag=!1,this.setCanvasElementStyle(a.background,{cursor:"default"}),n.targetObject=null,n.dx=0,n.dy=0,n.dx_offset=0,n.dy_offset=0,n.mouseHasMoved=!1}onWheel(n){this.onZoom(n.deltaY),n.preventDefault()}onZoom(n=0){const t=this.g;let o=1*t.zoom*(-n/1e3);t.zoom+o<.2?o=.2-t.zoom:t.zoom+o>1&&(o=1-t.zoom);let e=t.zoom/(t.zoom+o),s=t.cameraWidth/t.zoom*(e-1)*(1-(t.cameraWidth*1.5-t.mouse_x)/t.cameraWidth),c=t.cameraHeight/t.zoom*(e-1)*(1-(t.cameraHeight*1.5-t.mouse_y)/t.cameraHeight);t.zoom+=o,t.camera_x-=s,t.camera_y-=c,this.setCanvasElementStyle(a.canvas,{transform:`matrix3d(${g(t.camera_x,t.camera_y,t)})`})}onKeyDown(n){var t;switch(console.debug("Keydown: "+n.key),n.key){case"Backspace":case"Delete":if(((t=this.g.targetObject)==null?void 0:t.type)!=p.node)return;if(this.g.focusNodes.length>0)for(const o of this.g.focusNodes)console.debug("Deleting node: "+o.gid),this.deleteNode(o.gid);break}}renderElements(){const n=this.g.targetObject;if(!this.requestLineRender&&(n==null?void 0:n.type)==p.outputConnector&&(this.requestLineRender=n),(n==null?void 0:n.type)==p.node)for(const t of this.g.focusNodes)t.renderNode(t.nodeStyle);else if(this.requestLineRender){let t=this.requestLineRender;t.renderAllLines(t.svgLines),t.svgLines=t.svgLines.filter(o=>!o.requestDelete)}}step(){this.renderElements(),this.renderCanvasElement(a.container,this.containerStyle),this.renderCanvasElement(a.canvas,this.canvasStyle),this.renderCanvasElement(a.background,this.backgroundStyle),this.renderCanvasElement(a.selectionBox,this.selectionBoxStyle),window.requestAnimationFrame(this.step.bind(this))}addNodeObject(){const n=new C(null,this.g);return this.g.globalNodeTable[n.gid]=n,[n,this.g.globalNodeTable]}createNode(n){const t=new C(n,this.g);return this.g.globalNodeTable[t.gid]=t,t}createNodeAuto(n){const t=new C(n,this.g);this.g.globalNodeTable[t.gid]=t;const o=n.querySelectorAll(".sl-input");for(let c=0;c<o.length;c++){const u=o[c],d=u.getAttribute("sl-name"),_=t.addInputForm(u,d);for(let f=0;f<u.attributes.length;f++){const v=u.attributes[f];if(v.name.startsWith("sl-event:")){const l=v.name.split(":")[1],b=window[v.value];console.debug("Adding event listener: "+l),_.addInputUpdateListener(l,b)}}}const e=n.querySelectorAll(".sl-input-connector");for(let c=0;c<e.length;c++){const u=e[c],d=u.getAttribute("sl-name"),_=t.addInputConnector(u,d),f=u.getAttribute("sl-update");if(console.debug("Update function: "+f),f!=null||f!=null){console.debug("Update function: "+f,_);const v=window[f];_.updateFunction=v.bind(_)}}const s=n.querySelectorAll(".sl-output-connector");for(let c=0;c<s.length;c++){const u=s[c],d=u.getAttribute("sl-name");t.addOutputConnector(u,d)}for(let c=0;c<n.attributes.length;c++){const u=n.attributes[c];if(u.name.startsWith("sl-init")){const d=window[u.value];console.debug("Calling init func: "+d),d.bind(t)()}}return t}addNode(n,t,o){n.addNodeToCanvas(t,o)}addNodeAtMouse(n,t){this.g.ignoreMouseUp=!0;let o=this.g.mouse_x_world,e=this.g.mouse_y_world;console.debug("Adding node at "+o+", "+e),this.addNode(n,o,e),n.setStartPositions(),this.g.currentMouseDown=h.left,this.g.mousedown_x=this.g.mouse_x,this.g.mousedown_y=this.g.mouse_y,this.g.camera_pan_start_x=this.g.camera_x,this.g.camera_pan_start_y=this.g.camera_y,this.g.focusNodes=[n],this.g.targetObject=n;for(const s of this.g.globalNodeList)s.offFocus();this.onMouseMove(t)}deleteNode(n){return n in this.g.globalNodeTable?(this.g.globalNodeTable[n].destroy(),delete this.g.globalNodeTable[n],n):(console.error("Node not found: "+n),null)}focusNode(n){return n in this.g.globalNodeTable?(this.g.globalNodeTable[n].onFocus(),n):null}connectNodes(n,t,o,e){const s=this.g.globalNodeTable[n],c=this.g.globalNodeTable[o];if(!s||!c||!(s instanceof C)||!(c instanceof C))return null;const u=s.findOutput(t),d=c.findInput(e);return!u||!d?null:(u.connectToInput(d),0)}}return S});
